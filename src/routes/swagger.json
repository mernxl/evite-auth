{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Authorization": {
				"properties": {
					"userId": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"sessionId": {
						"type": "string"
					},
					"accessToken": {
						"type": "string"
					},
					"refreshToken": {
						"type": "string"
					}
				},
				"required": [
					"userId",
					"email",
					"sessionId",
					"accessToken",
					"refreshToken"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthSignUpInput": {
				"properties": {
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthSignInInput": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserBase": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"_id",
					"name",
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IDocMetaTimestamp": {
				"properties": {
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"User": {
				"allOf": [
					{
						"$ref": "#/components/schemas/UserBase"
					},
					{
						"$ref": "#/components/schemas/IDocMetaTimestamp"
					}
				]
			},
			"AuthMeUpdateInput": {
				"description": "Update a users information",
				"properties": {
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AuthUpdatePasswordInput": {
				"properties": {
					"cur_password": {
						"type": "string",
						"description": "Current Password"
					},
					"new_password": {
						"type": "string",
						"description": "New Password to use."
					}
				},
				"required": [
					"cur_password",
					"new_password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthRequestPasswordResetInput": {
				"properties": {
					"email": {
						"type": "string"
					}
				},
				"required": [
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthResetPasswordInput": {
				"properties": {
					"reset_token": {
						"type": "string",
						"description": "Gotten after calling request-password-reset route\n\nIf reset code already verified, then no need to send resetToken but obj needed"
					},
					"new_password": {
						"type": "string"
					}
				},
				"required": [
					"reset_token",
					"new_password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthIsTokenValidInput": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"access",
							"refresh"
						]
					},
					"token": {
						"type": "string"
					}
				},
				"required": [
					"type",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"Bearer": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "evite-micro-auth",
		"version": "1.0.0",
		"description": "Evite Micro Auth Backend",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "mernxl ",
			"email": "mernxl@gmail.com"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/sign-up": {
			"post": {
				"operationId": "SignUp",
				"responses": {
					"200": {
						"description": "User Authorization Credentials",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Authorization"
								}
							}
						}
					}
				},
				"description": "Create User in System",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuthSignUpInput"
							}
						}
					}
				}
			}
		},
		"/sign-in": {
			"post": {
				"operationId": "SignIn",
				"responses": {
					"200": {
						"description": "User Authorization Credentials",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Authorization"
								}
							}
						}
					}
				},
				"description": "Create User Authorization credential",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuthSignInInput"
							}
						}
					}
				}
			}
		},
		"/sign-out": {
			"delete": {
				"operationId": "SignOut",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Terminates a session, nullifies the refresh token",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/me": {
			"get": {
				"operationId": "Index",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"description": "Get the current user information. Details of the requester.",
				"tags": [
					"Auth"
				],
				"security": [
					{
						"Bearer": []
					}
				],
				"parameters": []
			},
			"patch": {
				"operationId": "MePut",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"summary": "Update user information, must be authenticated.",
				"tags": [
					"Auth"
				],
				"security": [
					{
						"Bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuthMeUpdateInput"
							}
						}
					}
				}
			}
		},
		"/me/email": {
			"put": {
				"operationId": "MeEmailPut",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"summary": "Update user Email",
				"tags": [
					"Auth"
				],
				"security": [
					{
						"Bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"email": {
										"type": "string"
									}
								},
								"required": [
									"email"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/update-password": {
			"post": {
				"operationId": "UpdatePassword",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Update user password, Should posses an authentication token, else 401.",
				"tags": [
					"Auth"
				],
				"security": [
					{
						"Bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuthUpdatePasswordInput"
							}
						}
					}
				}
			}
		},
		"/request-password-reset": {
			"post": {
				"operationId": "RequestPasswordReset",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "## NOTE\nCurrently, an email with a generated Password is sent. Token generate is not sent as of this version.\n\nRequest a password reset. A token will be sent to the provided email address,\non presenting that token, one can reset account.\n\nToken has a validity period of 20 Minutes after which you will need to request new token to reset password.",
				"summary": "Request a password reset, new password is generated and sent.",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuthRequestPasswordResetInput"
							}
						}
					}
				}
			}
		},
		"/reset-password": {
			"post": {
				"operationId": "ResetPassword",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Reset a password, using a reset token.\n\nTo reset, we need pass either token, generated and send via email",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuthResetPasswordInput"
							}
						}
					}
				}
			}
		},
		"/refresh-access-token": {
			"get": {
				"operationId": "RefreshAccessToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Authorization"
								}
							}
						}
					}
				},
				"description": "Refresh Access token, old one could still be used until it expires.",
				"summary": "Refresh access token",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [
					{
						"description": "RefreshToken that will be used to refresh access token",
						"in": "header",
						"name": "X-Auth",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/is-token-valid": {
			"post": {
				"operationId": "IsTokenValid",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"description": "Verify if a token is valid, it may be an access or refresh token.\n\nUseful when deciding whether to redirect to signin when a 401 response\nis ever received.",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuthIsTokenValidInput"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}